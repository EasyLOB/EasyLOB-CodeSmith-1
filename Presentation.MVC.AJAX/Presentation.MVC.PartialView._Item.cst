<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="..\CodeSmithHelper.cs" Inherits="XCodeSmith.CodeSmithHelper" Debug="False" Description="" %>

<%@ Property Name="Culture" Type="XCodeSmith.Cultures" Category="Context" Description="Culture for Plural Rules" %>
<%@ Property Name="Namespace" Type="String" Category="Context" Description="Namespace [using Namespace]" %>

<%@ Property Name="Database" Type="String" Category="Database" Description="Database [using Namespace.Data.Database]" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Database" Description="Table" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%
if (SourceTable.PrimaryKey == null) {
    throw new ApplicationException("SourceTable does not contain a primary key.");
}
      
string tableName = TableName(SourceTable.FullName);
string className = ClassName(SourceTable.FullName, Culture);
string objectName = ObjectName(SourceTable.FullName, Culture);

// !?! Master-Detail Views using relationships with more then 1 property are RARE, so I will use just 1 property !?!
ColumnSchema keyColumn = SourceTable.PrimaryKey.MemberColumns[0];
string keyProperty = PropertyName(keyColumn.Name);
%>
@model <%= className %>ItemModel

@{
<%  foreach (TableKeySchema fkTable in SourceTable.ForeignKeys) {
        string pkClassName = ClassName(fkTable.PrimaryKeyTable.FullName, Culture); %>    
    string <%= ObjectName(pkClassName, Culture) %>Text = Model.<%= className %> == null ? "" : (Model.<%= className %>.<%= pkClassName %>LookupText ?? "");
<%  }

    int image = 0;
    foreach (ColumnSchema column in SourceTable.Columns) {
        if (IsImage(column)) {
            string propertyName = PropertyName(column.Name); 
            if (image++ > 0) { %>
            
<%          } %>            
    string <%= objectName %>_<%= propertyName %>_Base64 = Convert.ToBase64String(new byte[] {});
    if (Model.<%= className %> != null && Model.<%= className %>.<%= propertyName %> != null)
    {
        <%= objectName %>_<%= propertyName %>_Base64 = Convert.ToBase64String(Model.<%= className %>.<%= propertyName %>);
    }
    string <%= objectName %>_<%= propertyName %>_Source = string.Format("data:image/jpg;base64,{0}", <%= objectName %>_<%= propertyName %>_Base64);        
<%      }
    } %>
}

<div id="Item_<%= className %>">
    @Html.ValidationSummary(false, "", new { @class = "text-danger" })

    @Html.HiddenFor(model => model.ControllerAction)
    @Html.HiddenFor(model => model.IsMasterDetail)
<%      foreach (TableKeySchema fkTable in SourceTable.ForeignKeys) {
            string fkClassName = ClassName(fkTable.ForeignKeyTable.FullName, Culture);
            ColumnSchema fkColumn = fkTable.ForeignKeyMemberColumns[0];
            string fkPropertyName = PropertyName(fkColumn.Name);
                
            string pkClassName = ClassName(fkTable.PrimaryKeyTable.FullName, Culture);
            ColumnSchema pkColumn = fkTable.PrimaryKeyMemberColumns[0];
            string pkPropertyName = PropertyName(pkColumn.Name);
            pkPropertyName = pkPropertyName == className ? pkPropertyName + fkPropertyName : pkPropertyName; %>
    @Html.HiddenFor(model => model.Master<%= fkPropertyName %>)
<%      } %>

    @{Html.EJ().Tab("Tab_<%= className %>")
        .Items(data =>
        {
            data.Add().ID("TabSheet_<%= className %>_<%= className %>").Text(<%= className %>Resources.EntitySingular).ContentTemplate(@<div class="panel-body">        
<%      foreach (ColumnSchema column in SourceTable.Columns) {
            string propertyName = PropertyName(column.Name); 
            string cssClassLabel = column.AllowDBNull ? "CssClassLabel" : "CssClassLabelRequired"; %>
                
<%          if (column.IsForeignKeyMember) {
                string fkClassName = ClassName(FKTableName(SourceTable, column), Culture);
                string fkObjectName = ObjectName(fkClassName, Culture); %>
                <div id="Group_<%= className %>_<%= propertyName %>" class="@AppDefaults.CssClassGroup col-md-6">
                    @Html.Label(@<%= fkClassName %>Resources.EntitySingular, new { @class = AppDefaults.<%= cssClassLabel %> })
                    @Html.EditorFor(model => model.<%= className %>.<%= propertyName %>, new { id = "<%= className %>_<%= propertyName %>", htmlAttributes = new { @class = AppDefaults.CssClassEditor } })                    
                    @Html.Action("Lookup", "<%= fkClassName %>", new
                    {
                        Text = <%= fkObjectName %>Text,
                        ValueId = "<%= className %>_<%= propertyName %>"
                    })
<%          } else if (IsImage(column)) { %>
                <div id="Group_<%= className %>_<%= propertyName %>" class="@AppDefaults.CssClassGroup <%= EditWidth(column) %>">
                    @Html.Label(@<%= className %>Resources.Property<%= propertyName %>, new { @class = AppDefaults.<%= cssClassLabel %> })
                    <img src="@<%= objectName %>_<%= propertyName %>_Source" class="z-image" />
<%          } else { %>
                <div id="Group_<%= className %>_<%= propertyName %>" class="@AppDefaults.CssClassGroup <%= EditWidth(column) %>">
                    @Html.LabelFor(model => model.<%= className %>.<%= propertyName %>, new { @class = AppDefaults.<%= cssClassLabel %> })
                    @Html.EditorFor(model => model.<%= className %>.<%= propertyName %>, new { id = "<%= className %>_<%= propertyName %>", htmlAttributes = new { @class = AppDefaults.CssClassEditor } })
<%          } %>
                    @Html.ValidationMessageFor(model => model.<%= className %>.<%= propertyName %>, "", new { @class = AppDefaults.CssClassValidator })
                </div>
<%      } %>

            </div>);
<%      foreach (TableKeySchema primaryKey in SourceTable.PrimaryKeys) {
            string pkClassName = ClassName(primaryKey.ForeignKeyTable.Name, Culture);
            int index = 0;
            foreach (ColumnSchema column in primaryKey.PrimaryKeyMemberColumns) {
                string fkPropertyName = PropertyName(column.Name);
                string pkPropertyName = PropertyName(primaryKey.ForeignKeyMemberColumns[index].Name); %>
            data.Add().ID("TabSheet_<%= className %>_<%= pkClassName %>").Text(<%= pkClassName %>Resources.EntityPlural).ContentTemplate(@<div class="panel-body">    
                <div id="Ajax_<%= className %>_<%= pkClassName %>"></div>
            </div>);
<%              index++;
            }
        } %>
        })
        .Render();
    }
</div>

<script>
    // Validate hidden fields
    $.validator.setDefaults({ ignore: null });
    // Parse validators
    $.validator.unobtrusive.parse($("#Ajax"));

    $(function () {
        try {
            var model = function () { return @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model)); }();
            var <%= objectName %>Dictionary = function () { return @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(DataHelper.GetDataDictionaryAttribute(typeof(<%= className %>)))); }();
            var controllerAction = model.ControllerAction == null ? "" : model.ControllerAction.toLowerCase();
            
            $(document).prop("title", "@(ViewBag.Title)");

            var ajaxUrl = "";
<%  foreach (TableKeySchema primaryKey in SourceTable.PrimaryKeys) {
        string pkClassName = ClassName(primaryKey.ForeignKeyTable.Name, Culture);
        int index = 0;
        foreach (ColumnSchema column in primaryKey.PrimaryKeyMemberColumns) {
            string fkPropertyName = PropertyName(column.Name);
            string pkPropertyName = PropertyName(primaryKey.ForeignKeyMemberColumns[index].Name); %>
            // <%= pkClassName %>
            ajaxUrl = "@(Html.Raw(Url.Action("Search", "<%= pkClassName %>", new { MasterUrl = Context.Request.Url.AbsoluteUri, MasterControllerAction = Model.ControllerAction, Master<%= pkPropertyName %> = Model.<%= className %>.<%= fkPropertyName %> })))";
            $("#Ajax_<%= className %>_<%= pkClassName %>").load(ajaxUrl);
<%          index++;
        }
    } %>

            ej.widget.init($("#Item_<%= className %>"));

            if ((model.ControllerAction = "create" && model.IsSecurityOperations.IsCreate) ||
                (model.ControllerAction = "read" && model.IsSecurityOperations.IsRead) ||
                (model.ControllerAction = "update" && model.IsSecurityOperations.IsUpdate) ||
                (model.ControllerAction = "delete" && model.IsSecurityOperations.IsDelete)) {
                $("#Item_<%= className %>").css("display", "block");
            }
            else {
                $("#Item_<%= className %>").css("display", "none");
            }

            var readonly = (controllerAction == "delete" || controllerAction == "read");
            $("input.form-control").not(":input[type=button], :input[type=image], :input[type=reset], :input[type=submit]").attr("readonly", readonly);
            if (readonly) {
                $("img.z-buttonLookup").hide();
            }
            else {
                $("img.z-buttonLookup").show();
            }

            $("input[name$='_Lookup']").attr("readonly", true);

            if (<%= objectName %>Dictionary.IsIdentity) {            
<%  foreach (ColumnSchema column in SourceTable.PrimaryKey.MemberColumns) {
        string propertyName = PropertyName(column.Name); %>
                $("#Group_<%= className %>_<%= propertyName %>").hide();
<%  } %>
            }

            // Associations (FK)
<%  foreach (TableKeySchema fkTable in SourceTable.ForeignKeys) {
        string fkClassName = ClassName(fkTable.ForeignKeyTable.FullName, Culture);
        ColumnSchema fkColumn = fkTable.ForeignKeyMemberColumns[0];
        string fkPropertyName = PropertyName(fkColumn.Name);

        string pkClassName = ClassName(fkTable.PrimaryKeyTable.FullName, Culture);
        ColumnSchema pkColumn = fkTable.PrimaryKeyMemberColumns[0];
        string pkPropertyName = PropertyName(pkColumn.Name);
        pkPropertyName = pkPropertyName == className ? pkPropertyName + fkPropertyName : pkPropertyName; %>
            // <%= pkClassName %>
            if (model.Master<%= pkPropertyName %> != null) {
                $("#<%= fkClassName %>_<%= fkPropertyName %>").val(model.Master<%= pkPropertyName %>);
                $("#Group_<%= fkClassName %>_<%= fkPropertyName %>").hide();            
            }
<%  } %>

            // Collections (PK)
            var display = controllerAction == "create" ? "none" : "block";
<%  for (int i = 0; i < SourceTable.PrimaryKeys.Count; i++) {
        for (int ii = 0; ii < SourceTable.PrimaryKeys[i].PrimaryKeyMemberColumns.Count; ii++) {
            //ColumnSchema pkColumn = SourceTable.PrimaryKeys[i].PrimaryKeyMemberColumns[ii];
            string pkClassName = ClassName(SourceTable.PrimaryKeys[i].ForeignKeyTable.Name, Culture); %>
            // <%= pkClassName %>
            $("#Grid_<%= pkClassName %>").css("display", display);
<%      }
    } %>
        } catch (exception) {
            alert(zExceptionMessage("_<%= className %>Item.cshtml", "function", exception));
        }
    });    
</script>
