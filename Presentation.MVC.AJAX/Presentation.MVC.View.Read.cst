<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="..\CodeSmithHelper.cs" Inherits="XCodeSmith.CodeSmithHelper" Debug="False" Description="" %>

<%@ Property Name="Culture" Type="XCodeSmith.Cultures" Category="Context" Description="Culture for Plural Rules" %>
<%@ Property Name="Database" Type="String" Category="Context" Description="Database" %>
<%@ Property Name="Namespace" Type="String" Category="Context" Description="Namespace" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Database" Description="Tables" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%
if (SourceTable.PrimaryKey == null) {
    throw new ApplicationException("SourceTable does not contain a primary key.");
}
      
string tableName = TableName(SourceTable.FullName);
string className = ClassName(SourceTable.FullName, Culture);
string objectName = ObjectName(SourceTable.FullName, Culture);;
%>
@model <%= className %>ItemModel

@{
    ViewBag.Title = AppHelper.PageTitle(<%= className %>Resources.EntitySingular, PresentationResources.Read);

    AjaxOptions ajaxOptions = new AjaxOptions()
    {
        HttpMethod = "POST",
        InsertionMode = InsertionMode.Replace,
        OnFailure = "ajaxFailure",
        OnSuccess = "ajaxSuccess",
        UpdateTargetId = "Ajax"
    };
}

<h3>@ViewBag.Title</h3>

@using (Ajax.BeginForm("Read", "<%= className %>", ajaxOptions))
{
    @Html.AntiForgeryToken()

    <div id="Partial" class="form-inline">
        @Html.Partial("_<%= className %>Item", Model)
    </div>
    
    <div class="z-formButtons">
        @Html.Raw(@Ajax.ImageLink("Button_Cancel", MvcHelper.ReadUrlDictionary(Context, "<%= className %>"), "Ajax", "z-buttonCancel", PresentationResources.Cancel))
    </div>
}

<div id="OperationResult"></div>

<script>
    $(function () {
        try
        {
            var model = function () { return @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model)); }();
    
            if (model.IsSecurityOperations.IsCreate) {
                $("#Partial").show();
                $("#Button_Cancel").show();
            }
            else {
                $("#Partial").hide();
                $("#Button_Cancel").show();
            }
        } catch (exception) {
            zExceptionMessage("<%= className %> Create.cshtml", "function()", exception.message)
        }
    });

    function ajaxFailure(jqXHR, textStatus, errorThrown) {
        try {
            $("#OperationResult").html(zAjaxOperationResult(jqXHR));
        } catch (exception) {
            zExceptionMessage("<%= className %> Create.cshtml", "ajaxFailure", exception.message)
        }
    }

    function ajaxSuccess(data, textStatus, jqXHR) {
        try {
            if (data != null) {
                $("#Ajax").load(data.uri);
            }
        } catch (exception) {
            zExceptionMessage("<%= className %> Create.cshtml", "ajaxSuccess", exception.message)
        }
    }
</script>