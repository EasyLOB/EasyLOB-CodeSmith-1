<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="..\CodeSmithHelper.cs" Inherits="XCodeSmith.CodeSmithHelper" Debug="False" Description="" %>

<%@ Property Name="Culture" Type="XCodeSmith.Cultures" Category="Context" Description="Culture for Plural Rules" %>
<%@ Property Name="Namespace" Type="String" Category="Context" Description="Namespace [using Namespace]" %>

<%@ Property Name="Database" Type="String" Category="Database" Description="Database [using Namespace.Data.Database]" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Database" Description="Table" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%

// Associations (FK) => Relationships FK
// Collections (PK)  => Relationships PK

if (SourceTable.PrimaryKey == null) {
    throw new ApplicationException("SourceTable does not contain a primary key.");
}

string tableName = TableName(SourceTable.FullName);
string className = ClassName(SourceTable.FullName, Culture);
string objectName = ObjectName(SourceTable.FullName, Culture);

bool isDataAnnotations = true; // Visual Studio Scaffolding or HTML Helpers

string comma;
int commaIndex = 0;
int commaParameters = 0;
foreach (ColumnSchema column in SourceTable.PrimaryKey.MemberColumns) {
    commaParameters++;
}
foreach (ColumnSchema column in SourceTable.NonPrimaryKeyColumns) {
    if (!column.AllowDBNull) {   
        commaParameters++;
    }    
}
foreach (ColumnSchema column in SourceTable.NonPrimaryKeyColumns) {
    if (column.AllowDBNull) {   
        commaParameters++;
    }    
}
%>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using <%= Namespace %>.Resources;
using EasyLOB.Data;
using EasyLOB.Library;

namespace <%= Namespace %>
{
    public partial class <%= className %>ViewModel : ZViewBase<<%= className %>ViewModel, <%= className %>DTO, <%= className %>>
    {
        #region Properties
<%  int pkIndex = 1;
    foreach (ColumnSchema column in SourceTable.Columns) {
        bool columnIsPrimaryKey = column.IsPrimaryKeyMember;
        bool columnIsIdentity = IsIdentity(SourceTable.PrimaryKey.MemberColumns[0]);
        bool columnIsNullable = column.AllowDBNull;
        bool isNullable = column.AllowDBNull; %>
        
<%      if (isDataAnnotations) { %>
        [Display(Name = "Property<%= PropertyName(column.Name) %>", ResourceType = typeof(<%= className %>Resources))]
<%      }
        if (isDataAnnotations) {
            if (IsDate(column.DataType) || IsDateTime(column.DataType)) { %>
        [DisplayFormat(DataFormatString = "{0:d}", ApplyFormatInEditMode = true)]
<%          } else if (IsDecimal(column.DataType) || IsFloat(column.DataType)) { %>
        [DisplayFormat(DataFormatString = "{0:f2}", ApplyFormatInEditMode = true)]
<%          } else if (IsInteger(column.DataType)) { %>
        [DisplayFormat(DataFormatString = "{0:d}", ApplyFormatInEditMode = true)]
<%          }
        }
        if (isDataAnnotations && column.IsPrimaryKeyMember) { %>
        //[Key]
<%      }
        if (isDataAnnotations && column.IsPrimaryKeyMember && SourceTable.PrimaryKey.MemberColumns.Count > 1) { %>
        //[Column(Order=<%= pkIndex++.ToString() %>)]
<%      }
        if (isDataAnnotations && !isNullable) { %>
        [Required]
<%      }
        if (isDataAnnotations && IsString(column.DataType)) {
            string stringLength = column.Size == -1 || IsNText(column) ? 1024.ToString() : column.Size.ToString();
            string stringLengthComment = column.Size == -1 ? " // !?!" : ""; %>
        [StringLength(<%= stringLength %>)]
<%      } %>        
        public virtual <%= GetType(column.DataType, isNullable) %> <%= PropertyName(column.Name) %> { get; set; }
<%  } %>

        #endregion Properties
<%  if (SourceTable.ForeignKeys.Count > 0) { %>

        #region Associations (FK)
<%      foreach (TableKeySchema fkTable in SourceTable.ForeignKeys) {
            string fkClassName = ClassName(fkTable.ForeignKeyTable.FullName, Culture);
            ColumnSchema fkColumn = fkTable.ForeignKeyMemberColumns[0];
            string fkPropertyName = PropertyName(fkColumn.Name);
            
            string pkClassName = ClassName(fkTable.PrimaryKeyTable.FullName, Culture);            
            ColumnSchema pkColumn = fkTable.PrimaryKeyMemberColumns[0];
            string pkPropertyName = PropertyName(pkColumn.Name);
            
            //string pkClassPropertyName = pkClassName == className ? pkClassName + fkPropertyName : pkClassName;
            string pkClassPropertyName = pkClassName; %>

        public virtual string <%= pkClassName %>LookupText { get; set; } // <%= fkPropertyName %>
<%      //public virtual string <= pkClassPropertyName >LookupText { get; set; } // <= fkPropertyName >
        } %>
    
        #endregion Associations FK
<%  } %>

        #region Methods
        
        public <%= className %>ViewModel()
        {
<%  foreach (ColumnSchema column in SourceTable.PrimaryKey.MemberColumns) {
        bool columnIsPrimaryKey = column.IsPrimaryKeyMember;
        bool columnIsIdentity = IsIdentity(SourceTable.PrimaryKey.MemberColumns[0]);
        bool columnIsNullable = column.AllowDBNull;
        bool isNullable = column.AllowDBNull; %>        
            <%= PropertyName(column.Name) %> = LibraryDefaults.Default_<%= GetDbType(column.DataType) %>;
<%  }
    foreach (ColumnSchema column in SourceTable.NonPrimaryKeyColumns) {
        bool columnIsPrimaryKey = column.IsPrimaryKeyMember;
        bool columnIsIdentity = IsIdentity(SourceTable.PrimaryKey.MemberColumns[0]);
        bool columnIsNullable = column.AllowDBNull;
        bool isNullable = column.AllowDBNull;
        if (!isNullable) { %>        
            <%= PropertyName(column.Name) %> = LibraryDefaults.Default_<%= GetDbType(column.DataType) %>;
<%      }
    }
    foreach (ColumnSchema column in SourceTable.NonPrimaryKeyColumns) {
        bool columnIsPrimaryKey = column.IsPrimaryKeyMember;
        bool columnIsIdentity = IsIdentity(SourceTable.PrimaryKey.MemberColumns[0]);
        bool columnIsNullable = column.AllowDBNull;
        bool isNullable = column.AllowDBNull;
        if (isNullable) { %>
            <%= PropertyName(column.Name) %> = null;
<%      }
    } %>           
        }
        
        public <%= className %>ViewModel(
<%  comma = ",";
    commaIndex = 0;
    foreach (ColumnSchema column in SourceTable.PrimaryKey.MemberColumns) {
        bool columnIsPrimaryKey = column.IsPrimaryKeyMember;
        bool columnIsIdentity = IsIdentity(SourceTable.PrimaryKey.MemberColumns[0]);
        bool columnIsNullable = column.AllowDBNull;
        bool isNullable = column.AllowDBNull; 
        if (++commaIndex >= commaParameters + SourceTable.ForeignKeys.Count) {
            comma = "";
        } %>
            <%= GetType(column.DataType, isNullable) %> <%= LocalName(column.Name) %><% if (isNullable) { %> = null<% }%><%= comma %>
<%  }
    foreach (ColumnSchema column in SourceTable.NonPrimaryKeyColumns) {
        bool columnIsPrimaryKey = column.IsPrimaryKeyMember;
        bool columnIsIdentity = IsIdentity(SourceTable.PrimaryKey.MemberColumns[0]);
        bool columnIsNullable = column.AllowDBNull;
        bool isNullable = column.AllowDBNull;
        if (!isNullable) { 
            if (++commaIndex >= commaParameters + SourceTable.ForeignKeys.Count) {
                comma = "";
            } %>        
            <%= GetType(column.DataType, isNullable) %> <%= LocalName(column.Name) %><% if (isNullable) { %> = null<% }%><%= comma %>
<%      }
    }
    foreach (ColumnSchema column in SourceTable.NonPrimaryKeyColumns) {
        bool columnIsPrimaryKey = column.IsPrimaryKeyMember;
        bool columnIsIdentity = IsIdentity(SourceTable.PrimaryKey.MemberColumns[0]);
        bool columnIsNullable = column.AllowDBNull;
        bool isNullable = column.AllowDBNull;
        if (isNullable) { 
            if (++commaIndex >= commaParameters + SourceTable.ForeignKeys.Count) {
                comma = "";
            } %>
            <%= GetType(column.DataType, isNullable) %> <%= LocalName(column.Name) %><% if (isNullable) { %> = null<% }%><%= comma %>
<%      }
    }
    
    if (SourceTable.ForeignKeys.Count > 0) {
        foreach (TableKeySchema fkTable in SourceTable.ForeignKeys) {
            string fkClassName = ClassName(fkTable.ForeignKeyTable.FullName, Culture);
            ColumnSchema fkColumn = fkTable.ForeignKeyMemberColumns[0];
            string fkPropertyName = PropertyName(fkColumn.Name);
            
            string pkClassName = ClassName(fkTable.PrimaryKeyTable.FullName, Culture);            
            ColumnSchema pkColumn = fkTable.PrimaryKeyMemberColumns[0];
            string pkPropertyName = PropertyName(pkColumn.Name);
            
            string pkClassPropertyName = pkClassName == className ? pkClassName + fkPropertyName : pkClassName;
            
            if (++commaIndex >= commaParameters + SourceTable.ForeignKeys.Count) {
                comma = "";
            } %>
            string <%= ObjectName(pkClassName, Culture) %>LookupText = null<%= comma %>
<%          //<= comma >string <= ObjectName(pkClassPropertyName, Culture) >LookupText = null
        }
    } %>
        )
        {
<%  foreach (ColumnSchema column in SourceTable.Columns) {
        bool columnIsPrimaryKey = column.IsPrimaryKeyMember;
        bool columnIsIdentity = IsIdentity(SourceTable.PrimaryKey.MemberColumns[0]);
        bool columnIsNullable = column.AllowDBNull;
        bool isNullable = column.AllowDBNull; %>
            <%= PropertyName(column.Name) %> = <%= LocalName(column.Name) %>;
<%  }

    if (SourceTable.ForeignKeys.Count > 0) {
        foreach (TableKeySchema fkTable in SourceTable.ForeignKeys) {
            string fkClassName = ClassName(fkTable.ForeignKeyTable.FullName, Culture);
            ColumnSchema fkColumn = fkTable.ForeignKeyMemberColumns[0];
            string fkPropertyName = PropertyName(fkColumn.Name);
            
            string pkClassName = ClassName(fkTable.PrimaryKeyTable.FullName, Culture);            
            ColumnSchema pkColumn = fkTable.PrimaryKeyMemberColumns[0];
            string pkPropertyName = PropertyName(pkColumn.Name);
            
            //string pkClassPropertyName = pkClassName == className ? pkClassName + fkPropertyName : pkClassName;
            string pkClassPropertyName = pkClassName; %>
            <%= pkClassPropertyName %>LookupText = <%= ObjectName(pkClassPropertyName, Culture) %>LookupText;
<%      }
    } %>
        }

        public <%= className %>ViewModel(IZDataBase data)
        {
            FromData(data);
        }

        public <%= className %>ViewModel(IZDTOBase<<%= className %>DTO, <%= className %>> dto)
        {
            FromDTO(dto);
        }

        #endregion Methods

        #region Methods ZViewBase

        public override Func<<%= className %>ViewModel, <%= className %>DTO> GetDTOSelector()
        {
            return x => new <%= className %>DTO
            {
<%  comma = ",";
    commaIndex = 0;
    foreach (ColumnSchema column in SourceTable.Columns) {
        if (++commaIndex >= SourceTable.Columns.Count + SourceTable.ForeignKeys.Count + 1) {
            comma = "";
        } %>
                <%= PropertyName(column.Name) %> = x.<%= PropertyName(column.Name) %><%= comma %>
<%  } %>
            };
        }

        public override Func<<%= className %>DTO, <%= className %>ViewModel> GetViewSelector()
        {
            return x => new <%= className %>ViewModel
            {
<%  comma = ",";
    commaIndex = 0;
    foreach (ColumnSchema column in SourceTable.Columns) {
        if (++commaIndex >= SourceTable.Columns.Count + SourceTable.ForeignKeys.Count + 1) {
            comma = "";
        } %>
                <%= PropertyName(column.Name) %> = x.<%= PropertyName(column.Name) %><%= comma %>
<%  }
    
    if (SourceTable.ForeignKeys.Count > 0) {
        foreach (TableKeySchema fkTable in SourceTable.ForeignKeys) {
            string fkClassName = ClassName(fkTable.ForeignKeyTable.FullName, Culture);
            ColumnSchema fkColumn = fkTable.ForeignKeyMemberColumns[0];
            string fkPropertyName = PropertyName(fkColumn.Name);
            
            string pkClassName = ClassName(fkTable.PrimaryKeyTable.FullName, Culture);            
            ColumnSchema pkColumn = fkTable.PrimaryKeyMemberColumns[0];
            string pkPropertyName = PropertyName(pkColumn.Name);
            
            //string pkClassPropertyName = pkClassName;
            string pkClassPropertyName = pkClassName == className ? pkClassName + fkPropertyName : pkClassName;

            if (++commaIndex >= SourceTable.Columns.Count + SourceTable.ForeignKeys.Count + 1) {
                comma = "";
            } %>
                <%= pkClassName %>LookupText = x.<%= pkClassName %>LookupText<%= comma %>
<%          //<= pkClassPropertyName >LookupText = <= objectName >.<= pkClassPropertyName > == null ? "" : <= objectName >.<= pkClassPropertyName >.LookupText;
        }
    } %>
                LookupText = x.LookupText
            };
        }

        public override void FromData(IZDataBase data)
        {
            if (data != null)
            {
                <%= className %>DTO dto = new <%= className %>DTO(data);
                <%= className %>ViewModel view = (new List<<%= className %>DTO> { (<%= className %>DTO)dto })
                    .Select(GetViewSelector())
                    .SingleOrDefault();
                LibraryHelper.Clone(view, this);            
            }
        }

        public override void FromDTO(IZDTOBase<<%= className %>DTO, <%= className %>> dto)
        {
            if (dto != null)
            {
                <%= className %>ViewModel view = (new List<<%= className %>DTO> { (<%= className %>DTO)dto })
                    .Select(GetViewSelector())
                    .SingleOrDefault();
                LibraryHelper.Clone(view, this);
            }
        }

        public override IZDataBase ToData()
        {
            return ToDTO().ToData();
        }
        
        public override IZDTOBase<<%= className %>DTO, <%= className %>> ToDTO()
        {
            return (new List<<%= className %>ViewModel> { this })
                .Select(GetDTOSelector())
                .SingleOrDefault();   
        }
        
        #endregion Methods ZViewBase
    }
}
